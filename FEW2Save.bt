//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: FEW2 save file
//   Authors: Josch
//   Version: 0.1
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "FEW2Save_Enums.bt"


typedef struct RECRUITFLAGS1
{
    Recruit BylethM : 1<name="Male Byleth">;
    Recruit BylethF: 1<name="Female Byleth"> ;
    Recruit Edelgard : 1<name="Edelgard">;
    Recruit Dimitri : 1<name="Dimitri">;
    Recruit Claude : 1<name="Claude">;
    Recruit Hubert : 1<name="Hubert">;
    Recruit Ferdinand : 1<name="Ferdinand">;
    Recruit Linhardt : 1<name="Linhardt">;
    Recruit Caspar : 1<name="Caspar">;
    Recruit Bernadetta : 1<name="Bernadetta">;
    Recruit Dorothea : 1<name="Dorothea">;
    Recruit Petra : 1<name="Petra">;
    Recruit Dedue : 1<name="Dedue">;
    Recruit Felix : 1<name="Felix">;
    Recruit Ashe : 1<name="Ashe">;
    Recruit Sylvain : 1<name="Sylvain">;
    Recruit Mercedes: 1<name="Mercedes"> ;
    Recruit Annette : 1<name="Annette">;
    Recruit Ingrid : 1<name="Ingrid">;
    Recruit Lorenz : 1<name="Lorenz">;
    Recruit Raphael : 1<name="Raphael">;
    Recruit Ignatz : 1<name="Ignatz">;
    Recruit Lysithea : 1<name="Lysithea">;
    Recruit Marianne : 1<name="Marianne">;
    Recruit Hilda : 1<name="Hilda">;
    Recruit Leonie : 1<name="Leonie">;
    Recruit Seteth : 1<name="Seteth">;
    Recruit Flayn : 1<name="Flayn">;
    Recruit Hanneman : 1<name="Hanneman">;
    Recruit Manuela : 1<name="Manuela">;
    Recruit Gilbert : 1<name="Gilbert">;
    Recruit Alois : 1<name="Alois">;
}RecruitFlags1;

typedef struct FLAGS
{
    int Bit0 : 1;
    int Bit1 : 1;
    int Bit2 : 1;
    int Bit3 : 1;
    int Bit4 : 1;
    int Bit5 : 1;
    int Bit6 : 1;
    int Bit7 : 1;
    int Bit8 : 1;
    int Bit9 : 1;
    int Bit10 : 1;
    int Bit11 : 1;
    int Bit12 : 1;
    int Bit13 : 1;
    int Bit14 : 1;
    int Bit15 : 1;
    int Bit16 : 1;
    int Bit17 : 1;
    int Bit18 : 1;
    int Bit19 : 1;
    int Bit20 : 1;
    int Bit21 : 1;
    int Bit22 : 1;
    int Bit23 : 1;
    int Bit24 : 1;
    int Bit25 : 1;
    int Bit26 : 1;
    int Bit27 : 1;
    int Bit28 : 1;
    int Bit29 : 1;
    int Bit30 : 1;
    int Bit31 : 1;
}Flags;


typedef struct WEAPONSTRUCT
{
    byte unknown1[4]<name="Unknown1">;
    Weapons weapon<name="Weapon Type">;
    byte unknown2<name="Unknown2">;
    ushort MtBuff<name="Increased Mt">;
    ushort DurBuff<name="Increased Dur">;
    WeaponSkills Skl1<name="Skill 1">;
    WeaponSkills Skl2<name="Skill 2">;
    ushort unk3<name="Unknown3">;
    byte MaxMt<name="Max Mt Forge">;
    byte CurMt<name="Current Mt Forge">;
    byte MaxDur<name="Max Dur Forge">;
    byte CurDur<name="Current Dur Forge">;
    byte unknown4[4]<name="Unknown4">;
}WeaponStruct;

string GetWeaponName(byte convoySlotID, WeaponStruct weapons[])
{
    if(convoySlotID == -1)
    {
        return Str("None");
    }
    else
    {   
        return Str("%s (%g)", EnumToString(weapons[convoySlotID].weapon), convoySlotID);
    }
}


typedef struct EQUIPMENT
{
    Characters charID<name="Character Asset ID">;
    FSkip(0xA);
    Classes class<name="Class">;
    ushort weapon<name="Weapon",read=GetWeaponName(this, File.blocks[4].block4Data.weapons),comment="To edit this, go to Block 4 and edit the Weapon Struct at this index">;
    ushort accessory<name="Accessory?">;
    CombatArts ability1<name="First Combat Art">;
    CombatArts ability2<name="Second Combat Art">;
    ushort Skl1<name="Skill1">;
    ushort Skl2<name="Skill2">;
    ushort Skl3<name="Skill3">;
    ushort Skl4<name="Skill4">;
    ushort Skl5<name="Skill5">;
    ushort Skl6<name="Skill6">;
    ushort Skl7<name="Skill7">;
    ushort Skl8<name="Skill8">;
    ushort Skl9<name="Skill9">;
    ushort Skl10<name="Skill10">;
    ushort unk1<comment="Seems to have to be 256 in most cases">;
    FSkip(0x2);
}Equipment;

typedef struct CHARSTATS
{
    byte unknown[112]<name="Padding?">;
    Equipment equip<name="Equipment/Skills">;
    byte unk3[258]<name="Unknown">;
    Flags uFlag<name="Unit Flags?">;
    byte unk4[32];
    ushort Health<name="HP">;
    ushort Str<name="Strength">;
    ushort Mag<name="Magic">;
    ushort Dex<name="Dexterity">;
    ushort Spd<name="Speed">;
    ushort Lck<name="Luck">;
    ushort Def<name="Defense">;
    ushort Res<name="Resistance">;
    ushort Cha<name="CHA">;
    ushort Lvl<name="Level">;
    byte unknown2[0x9C8]<name="Unknown2">;
    ushort characterAbilities[3]<name="Character Unique Abilities", comment="Refer to spreadsheet for IDs.">;
    byte unknown3[0x1CA]<name="Unknown3">;
}CharStats;

typedef struct CHARACTER
{
    uint32 blockChecksum<name="Checksum">;
    uint32 blockSize<name = "Block size">;
    uint32 always1<name = "Unk, always 1 ?">;
    uint32 reserved<name = "Reserved">;
    CharStats Stats<name="Stats">;
}Character<name=Str("%s ",EnumToString(this.Stats.equip.charID))>;

typedef struct DEPLOYSTRUCT
{
    Characters deploy1<name="Deploy Slot 1">;
    FSkip(0x2);
    Characters deploy2<name="Deploy Slot 2">;
    FSkip(0x2);
    Characters deploy3<name="Deploy Slot 3">;
    FSkip(0x2);
    Characters deploy4<name="Deploy Slot 4">;
    FSkip(0x2);
    Characters deploy5<name="Deploy Slot 5">;
    FSkip(0x2);
    Characters deploy6<name="Deploy Slot 6">;
    FSkip(0x2);
    Characters deploy7<name="Deploy Slot 7">;
    FSkip(0x2);
    Characters deploy8<name="Deploy Slot 8">;
    FSkip(0x2);
}DeployStruct;

typedef struct ACCESSORYSTRUCT
{
    Accessories accessID<name="Accessory ID">;
    byte unk[6]<name="Unknown">;
}AccessoryStruct;

typedef struct CONSUMEABLEBLOCK
{
    ushort amount<name="Amount">;
    byte unk[6];
}ConsumeableBlock;

typedef struct MATERIALBLOCK
{
    ushort amount<name="Amount">;
    byte unk[6];
}MaterialBlock;

typedef struct BATALLIONBLOCK
{
    ushort slotID<name="Slot ID">;
    ushort unk1;
    ushort batID<name="Batallion ID">;
    ushort unk2;
}BatallionBlock;

typedef struct BLOCK4DATA
{
    FSkip(0x70);
    byte unk1[0xA8]<name="Unknown Block 1", comment="Timeskip flag and current chapter data is in here">;
    RecruitFlags1 flags1<name="Recruitment Flags Block 1">;
    Flags recruitFlags[0x2]<name="Recruitment Flags">;
    byte unk2[0x64C]<name="Unknown Block 2">;
    DeployStruct charDeploy<name="Active Deployed Characters", comment="If a character is BylethM, that slot is likely not being currently used.">;
    byte unk3[0x172C]<name="Unknown Block 3">;
    WeaponStruct weapons[1150]<name="Weapon Block">;
    FSkip(0x4);
    AccessoryStruct accessories[1040]<name="Accessory Block">;
    ConsumeableBlock consumeables[0xF9]<name="Consumeables Block">;
    MaterialBlock materials[0xFE]<name="Materials Block">;
    FSkip(0x14);
    BatallionBlock batallions[105]<name="Batallions Block">;
    byte unk5[0x1C]<name="Unknown Block 5">;
    char shezName[0x8]<name="Main Character Name", comment="Use 32 for space and 0 for blank space.">;
    FSkip(0x20);
    char ashName[0x8]<name="Ashen Demon Name", comment="Use 32 for space and 0 for blank space.">;
    byte unk4[0x117C0]<name="Unknown Block 4">;
}Block4Data;

typedef struct SAVEBLOCK
{
    uint32 blockChecksum<name="Block checksum">;
    uint32 blockSize<name = "Block size">;
    uint32 always1<name = "Unk, always 1 ?">;
    uint32 reserved<name = "Reserved">;
    switch(blockSize)
    {
        case 121632:
            Block4Data block4Data<name="Block 4 Data">;
            break;
        default:
            byte data[blockSize - 0x10]<name="Block data",comment = "sum the ubytes here to get the block's checksum">;
            break;
    }
}SaveBlock;    

typedef struct CHARLIST
{
    
    
}CharList;
    
struct FILE
{
    FSkip(0x15c); //Jump to the blocks directly
    SaveBlock blocks[5]<name="Blocks",optimize=false>;
    Character CharacterStats[136];
    SaveBlock blocks[2]<name="Blocks",optimize=false>;
    byte lastSectionStart;
}File<name="Save file", open=true>;
